@page "/agendar/{MedicoId:long}"
@using Hackathon.Web.Models
@using Hackathon.Web.Services
@inject IMedicoService MedicoService
@inject IConsultaService ConsultaService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Agendar Consulta - MedConsulta</PageTitle>

@if (loading)
{
    <p>Carregando informações...</p>
}
else if (medico == null)
{
    <p>Médico não encontrado.</p>
}
else
{
    <div class="card">
        <h2 class="card-title">Agendar Consulta</h2>
        <p>Médico: <strong>@medico.Nome</strong> (CRM: @medico.Crm)</p>
        
        <EditForm Model="@consultaRequest" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label class="form-label">Data da Consulta</label>
                <InputDate @bind-Value="dataConsulta" class="form-control" />
            </div>
            
            <div class="form-group">
                <label class="form-label">Horário de Início</label>
                <InputSelect @bind-Value="horaInicio" class="form-control">
                    @foreach (var hora in GetHorariosDisponiveis())
                    {
                        <option value="@hora">@hora.ToString("HH:mm")</option>
                    }
                </InputSelect>
            </div>
            
            <div class="form-group">
                <label class="form-label">Duração (minutos)</label>
                <InputSelect @bind-Value="duracaoMinutos" class="form-control">
                    <option value="30">30 minutos</option>
                    <option value="60">60 minutos</option>
                    <option value="90">90 minutos</option>
                </InputSelect>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
            
            <div class="mt-4">
                <button type="submit" class="btn btn-primary">Agendar</button>
                <button type="button" class="btn btn-secondary" @onclick="Voltar">Voltar</button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public long MedicoId { get; set; }

    private MedicoModel? medico;
    private AgendarConsultaRequest consultaRequest = new AgendarConsultaRequest();
    private bool loading = true;
    private string errorMessage = string.Empty;
    
    // Form fields
    private DateTime dataConsulta = DateTime.Today.AddDays(1);
    private TimeOnly horaInicio = new TimeOnly(9, 0);
    private int duracaoMinutos = 30;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        if (!await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        
        await LoadMedico();
    }

    private async Task LoadMedico()
    {
        try
        {
            loading = true;
            medico = await MedicoService.GetMedicoByIdAsync(MedicoId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar médico: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private List<TimeOnly> GetHorariosDisponiveis()
    {
        var horarios = new List<TimeOnly>();
        
        // If no doctor or no working hours, return empty list
        if (medico == null || !medico.HorariosTrabalho.Any())
            return horarios;
        
        // Get day of week for selected date
        var diaSemana = dataConsulta.DayOfWeek;
        
        // Find working hours for this day
        var horarioTrabalho = medico.HorariosTrabalho.FirstOrDefault(h => h.DiaSemana == diaSemana);
        if (horarioTrabalho == null)
            return horarios;
        
        // Generate time slots every 30 minutes within working hours
        var horaAtual = horarioTrabalho.HoraInicio;
        while (horaAtual.AddMinutes(duracaoMinutos) <= horarioTrabalho.HoraFim)
        {
            horarios.Add(horaAtual);
            horaAtual = horaAtual.AddMinutes(30);
        }
        
        return horarios;
    }

    private async Task HandleSubmit()
    {
        try
        {
            errorMessage = string.Empty;
            
            // Get user ID
            var pacienteId = await AuthService.GetUserIdAsync();
            if (pacienteId == 0)
            {
                errorMessage = "Usuário não identificado. Por favor, faça login novamente.";
                return;
            }
            
            // Calculate end time
            var dataInicio = dataConsulta.Add(horaInicio.ToTimeSpan());
            var dataFim = dataInicio.AddMinutes(duracaoMinutos);
            
            // Prepare request
            consultaRequest.IdMedico = MedicoId;
            consultaRequest.IdPaciente = pacienteId;
            consultaRequest.DataConsultaInicio = dataInicio;
            consultaRequest.DataConsultaFim = dataFim;
            consultaRequest.ValorConsulta = 100; // Default value, could be from doctor's info
            
            // Submit request
            var result = await ConsultaService.AgendarConsultaAsync(consultaRequest);
            
            if (result != null)
            {
                // Success, navigate to consultations page
                NavigationManager.NavigateTo("/consultas");
            }
            else
            {
                errorMessage = "Erro ao agendar consulta. Por favor, tente novamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo($"/medicos/{MedicoId}");
    }
}